name: Build libc++

on:
  workflow_dispatch:
    inputs:
      version:
        description: libc++ version to build
        required: true

jobs:
  build:
    strategy: 
      matrix:
          msan: [true, false]
          
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Checkout LLVM
        run: git clone --depth 1 --branch llvmorg-${{ github.event.inputs.version }} https://github.com/llvm/llvm-project.git
      - name: Configure
        if: ${{ ! matrix.msan }}
        working-directory: llvm-project
        run: >
          cmake -G "Unix Makefiles" -S runtimes -B build
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_CXX_COMPILER=clang++
          -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind"
      - name: Configure with MSAN
        if: matrix.msan
        working-directory: llvm-project
        run: >
          cmake -G "Unix Makefiles" -S runtimes -B build
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_CXX_COMPILER=clang++
          -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind"
          -DLLVM_USE_SANITIZER=MemoryWithOrigins
      - name: Build
        working-directory: llvm-project
        run: cmake --build build -- cxx cxxabi
      - name: Make output dir
        id: output-dir
        run: |
          MSAN_ENABLED=${{ matrix.msan }}
          if [ "$MSAN_ENABLED" = "true"]; then
            OUT_DIR="libc++-${{ github.event.inputs.version }}-msan"
          else
            OUT_DIR="libc++-${{ github.event.inputs.version }}"
          fi
          echo "out-dir=$OUT_DIR" >> $GITHUB_OUTPUT
      - name: Package
        env: 
          OUT_DIR: ${{ steps.output-dir.outputs.out-dir }}
        run: |
          mkdir -p $OUT_DIR/usr/include/libcxx
          mkdir -p $OUT_DIR/usr/lib/libxcc
          cp -r llvm-project/build/include/* $OUT_DIR/usr/include/libcxx
          cp -r llvm-project/build/include/* $OUT_DIR/usr/lib/libcxx
          mkdir -p $OUT_DIR/DEBIAN
          sed -e "s/PACKAGE_NAME/$OUT_DIR/g" -e "s/VERSION_STRING/${{ github.event.inputs.version }}/g" control >> $OUT_DIR/DEBIAN/control
          dpkg-deb --build $OUT_DIR
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: ${{ steps.output-dir.outputs.out-dir }}
          path: "*.deb"

  upload:
    runs-on: ubuntu-24.04
    needs: [build]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      - name: Move artifacts
        run: |
          mv */* .
          find . -type d -empty -delete
      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          draft: false
          tag: ${{ github.event.inputs.version }}
          artifacts: libc++*
          token: ${{ secrets.GITHUB_TOKEN }}